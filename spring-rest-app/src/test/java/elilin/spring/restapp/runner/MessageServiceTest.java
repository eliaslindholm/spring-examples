package elilin.spring.restapp.runner;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;

import java.net.URI;
import java.util.Map;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;

/**
 * 
 * @author Elias Lindholm
 *
 */
public class MessageServiceTest {
	
	private static WebAppRunner runner;
	private RestTemplate restTemplate;

	@BeforeClass
	public static void startWebapp() throws Exception {
		runner = new WebAppRunner();
		runner.start();
	}
	
	@AfterClass
	public static void stopWebapp() throws Exception {
		runner.stop();
	}
	
	@Before
	public void setup() {
		restTemplate = new RestTemplate();
		restTemplate.setErrorHandler(new DefaultResponseErrorHandler() {
			@Override
			protected boolean hasError(org.springframework.http.HttpStatus statusCode) {
				return statusCode.series() == org.springframework.http.HttpStatus.Series.SERVER_ERROR;
			}
		});
	}
	
	@Test
	public void postCreatesANewResourceAndReturnsTheUriOfTheNewResourceInTheLocationHeader() throws Exception {
		ResponseEntity<Void> response = restTemplate.postForEntity(getMessagesUri(), new MessageDto("Hello World!", "Foppa"), Void.class);
		assertEquals( "Status code", org.springframework.http.HttpStatus.CREATED, response.getStatusCode());
		assertNotNull("Location header should be set", response.getHeaders().getLocation());
	}

	@Test
	public void getReturnsTheResourceIdentifiedByAGivenUri() throws Exception {
		URI messageUri = restTemplate.postForLocation(getMessagesUri(), new MessageDto("Hello World!", "Foppa"));
		
		ResponseEntity<MessageDto> response = restTemplate.getForEntity(messageUri, MessageDto.class);
		
		assertEquals("application", response.getHeaders().getContentType().getType());
		assertEquals("json", response.getHeaders().getContentType().getSubtype());
		MessageDto message = response.getBody();
		assertEquals("Hello World!", message.getMessage());
		assertEquals("Foppa", message.getSignature());
		assertNotNull("Id should be generated by server upon creation", message.getId());
		assertNotNull("Creation time is set by server upon creation", message.getCreated());
	}
	
	@Test
	public void malformedRequestToCreateResourceReturns400StatusCode() throws Exception {
		ResponseEntity<Map> response = restTemplate.postForEntity(getMessagesUri(), new MessageDto(null, null), Map.class);
		assertEquals(org.springframework.http.HttpStatus.BAD_REQUEST, response.getStatusCode());
	}

	@Test
	public void malformedRequestToCreateResourceReturnsValidationErrors() throws Exception {
		Map errors = restTemplate.postForObject(getMessagesUri(), new MessageDto(null, null), Map.class);
		assertEquals("Missing", errors.get("message"));
		assertEquals("Missing", errors.get("signature"));
	}
	
	@Test
	public void putUpdatesAnExistingResource() throws Exception {
		URI messageUri = restTemplate.postForLocation(getMessagesUri(), new MessageDto("Hello World!", "Foppa"));
		
		ResponseEntity<MessageDto> response = restTemplate.getForEntity(messageUri,MessageDto.class);
		String etag = response.getHeaders().getETag();
		
		MessageDto msg = response.getBody();
		msg.setMessage("Updated message");
		HttpHeaders headers = new HttpHeaders();
		headers.set("If-Match", etag);
		HttpEntity<MessageDto> put = new HttpEntity<MessageDto>(msg, headers);
		ResponseEntity<MessageDto> exchange = restTemplate.exchange(messageUri, HttpMethod.PUT, put, MessageDto.class);
		assertEquals(HttpStatus.NO_CONTENT, exchange.getStatusCode());
		
		MessageDto updated = restTemplate.getForObject(messageUri, MessageDto.class);
		assertEquals("Updated message", updated.getMessage());
	}
	
	@Test
	public void responseIncludesNewETagAfterResourceIsUpdatedWithPut() throws Exception {
		URI messageUri = restTemplate.postForLocation(getMessagesUri(), new MessageDto("Hello World!", "Foppa"));
		
		ResponseEntity<MessageDto> response = restTemplate.getForEntity(messageUri,MessageDto.class);
		String etag = response.getHeaders().getETag();
		
		MessageDto msg = response.getBody();
		msg.setMessage("Updated message");
		HttpHeaders headers = new HttpHeaders();
		headers.set("If-Match", etag);
		HttpEntity<MessageDto> put = new HttpEntity<MessageDto>(msg, headers);
		ResponseEntity<MessageDto> exchange = restTemplate.exchange(messageUri, HttpMethod.PUT, put, MessageDto.class);
		assertNotNull("ETag header should be set after successful update", exchange.getHeaders().getETag());
		assertFalse(etag.equals(exchange.getHeaders().getETag()));
	}

	@Test
	public void deleteRemovesAnExistingMessage() throws Exception {
		URI messageUri = restTemplate.postForLocation(getMessagesUri(), new MessageDto("Delete me!", "Foppa"));
		
		ResponseEntity<Void> response = restTemplate.exchange(messageUri, HttpMethod.DELETE, null, Void.class);
		assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
		
	 	response = restTemplate.getForEntity(messageUri, Void.class);
		assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
		
		response = restTemplate.exchange(messageUri, HttpMethod.DELETE, null, Void.class);
		assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
		
	}

	private String getMessagesUri() {
		return runner.getAbsoluteUrl("/messages");
	}
	
}
